name: Build and Deploy to Production

on:
  push:
    branches: [main]

permissions:
  contents: write
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "22"
          cache: "yarn"

      - name: Install dependencies
        run: yarn install --frozen-lockfile

      - name: Build SvelteKit app
        run: yarn build

      - name: Create 404.html for SPA support
        run: node scripts/post-build.js

      - name: Setup Pages
        uses: actions/configure-pages@v4

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: "build"

      - name: Upload build artifact for Electron
        uses: actions/upload-artifact@v4
        with:
          name: sveltekit-build
          path: build
          retention-days: 1

  build-electron-windows:
    runs-on: windows-latest
    needs: build

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "22"
          cache: "yarn"

      - name: Install dependencies
        run: yarn install --frozen-lockfile

      - name: Download SvelteKit build
        uses: actions/download-artifact@v4
        with:
          name: sveltekit-build
          path: build

      - name: Install Electron dependencies
        run: npm run electron:install

      - name: Build Electron for Windows
        run: npm run electron:build && npx electron-builder --win --publish=never

      - name: Upload Windows installer
        uses: actions/upload-artifact@v4
        with:
          name: windows-installer
          path: dist-electron/*.exe
          retention-days: 30

  build-electron-macos:
    runs-on: macos-latest
    needs: build

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "22"
          cache: "yarn"

      - name: Install dependencies
        run: yarn install --frozen-lockfile

      - name: Download SvelteKit build
        uses: actions/download-artifact@v4
        with:
          name: sveltekit-build
          path: build

      - name: Install Electron dependencies
        run: npm run electron:install

      - name: Build Electron for macOS
        run: npm run electron:build && npx electron-builder --mac --publish=never

      - name: Upload macOS installer
        uses: actions/upload-artifact@v4
        with:
          name: macos-installer
          path: dist-electron/*.dmg
          retention-days: 30

  create-release:
    runs-on: ubuntu-latest
    needs: [build-electron-windows, build-electron-macos]
    if: success()
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get version from package.json
        id: get_version
        run: |
          VERSION=$(grep -o '"version": "[^"]*"' package.json | cut -d'"' -f4)
          TAG_NAME="v${VERSION}"
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          echo "tag=${TAG_NAME}" >> $GITHUB_OUTPUT
          echo "Found version: ${VERSION}"
          echo "Tag will be: ${TAG_NAME}"

      - name: Check if tag exists
        id: check_tag
        run: |
          if git rev-parse "${{ steps.get_version.outputs.tag }}" >/dev/null 2>&1; then
            echo "exists=true" >> $GITHUB_OUTPUT
            echo "Tag ${{ steps.get_version.outputs.tag }} already exists, skipping release creation"
          else
            echo "exists=false" >> $GITHUB_OUTPUT
            echo "Tag ${{ steps.get_version.outputs.tag }} does not exist, will create release"
          fi

      - name: Create Git tag
        if: steps.check_tag.outputs.exists == 'false'
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git tag -a "${{ steps.get_version.outputs.tag }}" -m "Release ${{ steps.get_version.outputs.tag }}"
          git push origin "${{ steps.get_version.outputs.tag }}"

      - name: Download Windows installer
        if: steps.check_tag.outputs.exists == 'false'
        uses: actions/download-artifact@v4
        with:
          name: windows-installer
          path: ./release-assets

      - name: Download macOS installer
        if: steps.check_tag.outputs.exists == 'false'
        uses: actions/download-artifact@v4
        with:
          name: macos-installer
          path: ./release-assets

      - name: Create GitHub Release
        if: steps.check_tag.outputs.exists == 'false'
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.get_version.outputs.tag }}
          name: Release ${{ steps.get_version.outputs.tag }}
          body: |
            ## GPRM ${{ steps.get_version.outputs.version }}
            
            Automatycznie wygenerowane release po merge do main.
            
            ### Instalatory:
            - **Windows**: `.exe` installer
            - **macOS**: `.dmg` installer
            
            ### Instalacja aktualizacji:
            Aplikacja automatycznie sprawdzi dostępność aktualizacji po uruchomieniu.
          files: |
            ./release-assets/*.exe
            ./release-assets/*.dmg
          generate_release_notes: true
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4